ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("0yq1Z2awymw5LGk3bENVtz", "Black")
)
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
# Display plots in a grid layout
library(gridExtra)
# 将图形放置在四宫格中
grid.arrange(plots[[1]][[1]], plots[[1]][[2]], plots[[2]][[1]], plots[[2]][[2]],
ncol = 2, nrow = 2)
library(gridExtra)
library(ggplot2)
# 创建四个ggplot对象
pink_plot <- ggplot(pink, aes(x = valence, y = energy)) +
geom_point() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Pink") +
theme(plot.title = element_text(hjust = 0.5))
black_plot <- ggplot(black, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Black") +
theme(plot.title = element_text(hjust = 0.5))
blue_plot <- ggplot(blue, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Blue") +
theme(plot.title = element_text(hjust = 0.5))
white_plot <- ggplot(white, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("White") +
theme(plot.title = element_text(hjust = 0.5))
# 将ggplot对象转换为grob对象
pink_grob <- ggplotGrob(pink_plot)
black_grob <- ggplotGrob(black_plot)
blue_grob <- ggplotGrob(blue_plot)
white_grob <- ggplotGrob(white_plot)
# 将图形以四宫格的方式排列
grid.arrange(pink_grob, black_grob, blue_grob, white_grob, ncol = 2, nrow = 2,widths = c(0.5, 0.5), heights = c(0.5, 0.5))
library(tidyverse)
library(spotifyr)
library(compmus)
# Function to create self similarity matrix plot
create_similarity_plot <- function(track_id, title) {
# Load audio analysis data
audio_data <- get_tidy_audio_analysis(track_id) %>%
compmus_align(bars, segments) %>%
select(bars) %>%
unnest(bars) %>%
mutate(
pitches = map(segments,
compmus_summarise, pitches,
method = "acentre", norm = "manhattan"),
timbre = map(segments,
compmus_summarise, timbre,
method = "mean")
)
# Create self similarity matrices for Chroma and Timbre
chroma_matrix <- audio_data %>%
compmus_self_similarity(pitches, "aitchison") %>%
mutate(d = d / max(d), type = "Chroma")
timbre_matrix <- audio_data %>%
compmus_self_similarity(timbre, "cosine") %>%
mutate(d = d / max(d), type = "Timbre")
# Plot self similarity matrices
plot_chroma <- ggplot(
chroma_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("0yq1Z2awymw5LGk3bENVtz", "Black")
)
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
library(tidyverse)
library(spotifyr)
library(compmus)
# Function to create self similarity matrix plot
create_similarity_plot <- function(track_id, title) {
# Load audio analysis data
audio_data <- get_tidy_audio_analysis(track_id) %>%
compmus_align(bars, segments) %>%
select(bars) %>%
unnest(bars) %>%
mutate(
pitches = map(segments,
compmus_summarise, pitches,
method = "acentre", norm = "manhattan"),
timbre = map(segments,
compmus_summarise, timbre,
method = "mean")
)
# Create self similarity matrices for Chroma and Timbre
chroma_matrix <- audio_data %>%
compmus_self_similarity(pitches, "aitchison") %>%
mutate(d = d / max(d), type = "Chroma")
timbre_matrix <- audio_data %>%
compmus_self_similarity(timbre, "cosine") %>%
mutate(d = d / max(d), type = "Timbre")
# Plot self similarity matrices
plot_chroma <- ggplot(
chroma_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("7kfAbcKnRajKOmuACF3dxl", "Black")
)
theme_set(theme(panel.background = element_rect(fill = "transparent")))
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
# Display plots in a grid layout
library(gridExtra)
grid.arrange(plots[[1]][[1]], plots[[1]][[2]], plots[[2]][[1]], plots[[2]][[2]],
ncol = 2, nrow = 2,c(0.5, 0.5), heights = c(0.5, 0.5))
library(tidyverse)
library(spotifyr)
library(compmus)
# Function to create self similarity matrix plot
create_similarity_plot <- function(track_id, title) {
# Load audio analysis data
audio_data <- get_tidy_audio_analysis(track_id) %>%
compmus_align(bars, segments) %>%
select(bars) %>%
unnest(bars) %>%
mutate(
pitches = map(segments,
compmus_summarise, pitches,
method = "acentre", norm = "manhattan"),
timbre = map(segments,
compmus_summarise, timbre,
method = "mean")
)
# Create self similarity matrices for Chroma and Timbre
chroma_matrix <- audio_data %>%
compmus_self_similarity(pitches, "aitchison") %>%
mutate(d = d / max(d), type = "Chroma")
timbre_matrix <- audio_data %>%
compmus_self_similarity(timbre, "cosine") %>%
mutate(d = d / max(d), type = "Timbre")
# Plot self similarity matrices
plot_chroma <- ggplot(
chroma_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("7kfAbcKnRajKOmuACF3dxl", "Black")
)
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
# Display plots in a grid layout
library(gridExtra)
grid.arrange(plots[[1]][[1]], plots[[1]][[2]], plots[[2]][[1]], plots[[2]][[2]],
ncol = 2, nrow = 2,c(0.5, 0.5), heights = c(0.5, 0.5))
library(tidyverse)
library(spotifyr)
library(compmus)
# Function to create self similarity matrix plot
create_similarity_plot <- function(track_id, title) {
# Load audio analysis data
audio_data <- get_tidy_audio_analysis(track_id) %>%
compmus_align(bars, segments) %>%
select(bars) %>%
unnest(bars) %>%
mutate(
pitches = map(segments,
compmus_summarise, pitches,
method = "acentre", norm = "manhattan"),
timbre = map(segments,
compmus_summarise, timbre,
method = "mean")
)
# Create self similarity matrices for Chroma and Timbre
chroma_matrix <- audio_data %>%
compmus_self_similarity(pitches, "aitchison") %>%
mutate(d = d / max(d), type = "Chroma")
timbre_matrix <- audio_data %>%
compmus_self_similarity(timbre, "cosine") %>%
mutate(d = d / max(d), type = "Timbre")
# Plot self similarity matrices
plot_chroma <- ggplot(
chroma_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("7kfAbcKnRajKOmuACF3dxl", "Black")
)
theme_set(theme(panel.background = element_rect(fill = "transparent")))
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
# Display plots in a grid layout
library(gridExtra)
grid.arrange(plots[[1]][[1]], plots[[1]][[2]], plots[[2]][[1]], plots[[2]][[2]],
ncol = 2, nrow = 2)
library(tidyverse)
library(spotifyr)
library(compmus)
# Function to create self similarity matrix plot
create_similarity_plot <- function(track_id, title) {
# Load audio analysis data
audio_data <- get_tidy_audio_analysis(track_id) %>%
compmus_align(bars, segments) %>%
select(bars) %>%
unnest(bars) %>%
mutate(
pitches = map(segments,
compmus_summarise, pitches,
method = "acentre", norm = "manhattan"),
timbre = map(segments,
compmus_summarise, timbre,
method = "mean")
)
# Create self similarity matrices for Chroma and Timbre
chroma_matrix <- audio_data %>%
compmus_self_similarity(pitches, "aitchison") %>%
mutate(d = d / max(d), type = "Chroma")
timbre_matrix <- audio_data %>%
compmus_self_similarity(timbre, "cosine") %>%
mutate(d = d / max(d), type = "Timbre")
# Plot self similarity matrices
plot_chroma <- ggplot(
chroma_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Chroma Self Similarity Matrix - ", title))
plot_timbre <- ggplot(
timbre_matrix,
aes(
x = xstart + xduration / 2,
width = xduration,
y = ystart + yduration / 2,
height = yduration,
fill = d
)
) +
geom_tile() +
coord_fixed() +
scale_fill_viridis_c(guide = "none") +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA)
) +
labs(x = "", y = "") +
ggtitle(paste0("Timbre Self Similarity Matrix - ", title))
# Return list of plots
list(plot_chroma, plot_timbre)
}
# Track IDs and titles
tracks <- list(
c("6fr1g7TqyLtZC3WqSKovcb", "Blue"),
c("7kfAbcKnRajKOmuACF3dxl", "Black")
)
theme_set(theme(panel.background = element_rect(fill = "transparent")))
# Create plots for each track
plots <- lapply(tracks, function(track) {
create_similarity_plot(track[1], track[2])
})
# Display plots in a grid layout
library(gridExtra)
grid.arrange(plots[[1]][[1]], plots[[1]][[2]], plots[[2]][[1]], plots[[2]][[2]],
ncol = 2, nrow = 2)
pink <- get_playlist_audio_features("", "2OZ42DxmlNZUua113zuz1A")
blue <- get_playlist_audio_features("", "0wtw9NQFVy2zMQxZ8BAe5T")
black <- get_playlist_audio_features("", "36pH6ey9uoMBnZDj4pAXyv")
white <- get_playlist_audio_features("", "0SqwX4Y54AjbnXsha6QU4I")
library(gridExtra)
library(ggplot2)
theme_set(theme(panel.background = element_rect(fill = "transparent")))
# 创建四个ggplot对象
pink_plot <- ggplot(pink, aes(x = valence, y = energy)) +
geom_point() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Pink") +
theme(plot.title = element_text(hjust = 0.5))
black_plot <- ggplot(black, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Black") +
theme(plot.title = element_text(hjust = 0.5))
blue_plot <- ggplot(blue, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("Blue") +
theme(plot.title = element_text(hjust = 0.5))
white_plot <- ggplot(white, aes(x = valence, y = energy)) +
geom_jitter() + geom_smooth() +
coord_cartesian(xlim = c(0,0.8), ylim = c(0, 1)) +
ggtitle("White") +
theme(plot.title = element_text(hjust = 0.5))
# 将ggplot对象转换为grob对象
pink_grob <- ggplotGrob(pink_plot)
black_grob <- ggplotGrob(black_plot)
blue_grob <- ggplotGrob(blue_plot)
white_grob <- ggplotGrob(white_plot)
# 将图形以四宫格的方式排列
grid.arrange(pink_grob, black_grob, blue_grob, white_grob, ncol = 2, nrow = 2,widths = c(0.5, 0.5), heights = c(0.5, 0.5))
